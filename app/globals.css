@import "tailwindcss";
@plugin "@tailwindcss/typography";

@custom-variant dark (&:is(.dark *));

@theme {
  --font-sans: var(--font-geist-sans);
}

@layer base {
  *,
  ::after,
  ::before,
  ::backdrop,
  ::file-selector-button {
    border-color: var(--color-gray-200, currentColor);
  }
}

body {
  height: 100vh;
  font-family:
    var(--font-sans) system-ui,
    -apple-system,
    BlinkMacSystemFont,
    "Segoe UI",
    Roboto,
    Oxygen,
    Ubuntu,
    Cantarell,
    "Open Sans",
    "Helvetica Neue",
    sans-serif;
}

.prose .anchor {
  @apply invisible absolute no-underline;

  margin-left: -0.8em;
  padding-right: 0.5em;
  width: 80%;
  max-width: 700px;
  cursor: pointer;
}

.anchor:hover {
  @apply visible;
}

.prose a {
  text-decoration-color: #374151;
  @apply decoration-[0.1em] underline-offset-2 transition-all dark:decoration-gray-300;
}

.prose .anchor:after {
  @apply text-neutral-300;
  content: "#";
}

.prose *:hover > .anchor {
  @apply visible;
}

pre {
  /* position: relative; */
  margin-top: 0 !important;
}

figcaption[data-rehype-pretty-code-title] {
  @apply bg-[#1f2937] dark:bg-[#0F141D];
  color: #fff;
  padding: 0.5em 1.14286em;
  border-radius: 0.375rem 0.375rem 0 0;
  transform: translateY(10px);
  font-size: 0.875rem;
}

.prose :where(code):not(:where([class~="not-prose"] *))::before,
.prose :where(code):not(:where([class~="not-prose"] *))::after {
  content: "";
}

code {
  @apply bg-gray-200 dark:bg-gray-600;
  padding: 0.125rem 0.25rem;
  border-radius: 0.25rem;
}

pre code {
  @apply bg-transparent;
}

.prose
  :where(blockquote p:first-of-type):not(
    :where([class~="not-prose"] *)
  )::before,
.prose
  :where(blockquote p:first-of-type):not(
    :where([class~="not-prose"] *)
  )::after {
  content: "";
}

[data-rehype-pretty-code-fragment] code {
  @apply grid min-w-full break-words rounded-none border-0 bg-transparent p-0 text-sm text-black;
  counter-reset: line;
  box-decoration-break: clone;
}
[data-rehype-pretty-code-fragment] .line {
  @apply py-1;
}

[data-rehype-pretty-code-fragment] [data-line-numbers] > .line::before {
  counter-increment: line;
  content: counter(line);
  display: inline-block;
  width: 1rem;
  margin-right: 1rem;
  text-align: right;
  color: gray;
}

span[data-highlighted-line] {
  @apply bg-black/30;
  @apply rounded-md;
}

mark[data-highlighted-chars] {
  @apply rounded-md  bg-black/30 p-1;
}
