@import "tailwindcss";
@plugin "@tailwindcss/typography";

@custom-variant dark (&:is(.dark *));

@theme {
  --font-sans: var(--font-geist-sans);
}

:root {
  interpolate-size: allow-keywords;
}

html {
  scrollbar-width: thin;
  scrollbar-color: #e8e8e8 transparent;
  transition: scrollbar-color 0.2s ease;
}

html.dark {
  scrollbar-width: thin;
  scrollbar-color: #404040 transparent;
  transition: scrollbar-color 0.2s ease;
}

::-webkit-scrollbar {
  width: 8px;
  height: 8px;
}

::-webkit-scrollbar-track {
  background: transparent;
}

::-webkit-scrollbar-thumb {
  background-color: #e8e8e8;
  border-radius: 4px;
  transition: background-color 0.2s ease;
}

.dark::-webkit-scrollbar-thumb {
  background-color: #404040;
}

body {
  height: 100vh;
  font-family:
    var(--font-sans) system-ui,
    -apple-system,
    BlinkMacSystemFont,
    "Segoe UI",
    Roboto,
    Oxygen,
    Ubuntu,
    Cantarell,
    "Open Sans",
    "Helvetica Neue",
    sans-serif;
}

.prose .anchor {
  @apply invisible absolute no-underline;

  margin-left: -0.8em;
  padding-right: 0.5em;
  width: 80%;
  max-width: 700px;
  cursor: pointer;
}

.anchor:hover {
  @apply visible;
}

.prose a {
  text-decoration-color: #374151;
  @apply decoration-[0.1em] underline-offset-2 transition-all dark:decoration-gray-300;
}

.prose .anchor:after {
  @apply text-neutral-300;
  content: "#";
}

.prose *:hover > .anchor {
  @apply visible;
}

pre {
  margin-top: 0 !important;
}

figcaption[data-rehype-pretty-code-title] {
  @apply bg-[#1f2937] dark:bg-[#0F141D];
  color: #fff;
  padding: 0.5em 1.14286em;
  border-radius: 0.375rem 0.375rem 0 0;
  transform: translateY(10px);
  font-size: 0.875rem;
}

.prose :where(code):not(:where([class~="not-prose"] *))::before,
.prose :where(code):not(:where([class~="not-prose"] *))::after {
  content: "";
}

code {
  @apply bg-neutral-200 dark:bg-neutral-700;
  padding: 0.125rem 0.25rem;
  border-radius: 0.25rem;
}

pre code {
  @apply bg-transparent dark:bg-transparent;
}

.prose
  :where(blockquote p:first-of-type):not(
    :where([class~="not-prose"] *)
  )::before,
.prose
  :where(blockquote p:first-of-type):not(
    :where([class~="not-prose"] *)
  )::after {
  content: "";
}

[data-rehype-pretty-code-fragment] code {
  @apply grid min-w-full rounded-none border-0 bg-transparent p-0 text-sm break-words text-black;
  counter-reset: line;
  box-decoration-break: clone;
}
[data-rehype-pretty-code-fragment] .line {
  @apply py-1;
}

[data-rehype-pretty-code-fragment] [data-line-numbers] > .line::before {
  counter-increment: line;
  content: counter(line);
  display: inline-block;
  width: 1rem;
  margin-right: 1rem;
  text-align: right;
  color: gray;
}

span[data-highlighted-line] {
  @apply bg-black/30;
}

mark[data-highlighted-chars] {
  @apply rounded-md bg-black/30 p-1;
}

details {
  @apply my-4 h-10 rounded-md bg-neutral-200 px-4 py-2 dark:bg-neutral-700;
  transition: height 0.5s ease;

  &[open] {
    height: auto;
    overflow: clip;
  }
}

summary {
  @apply flex cursor-pointer items-center;

  &::marker {
    content: "";
  }
}

@keyframes fadeDown {
  from {
    opacity: 0;
    filter: blur(1px);
    transform: translate3d(0, 10px, 0);
  }
  to {
    opacity: 1;
    filter: blur(0);
    transform: translate3d(0, 0, 0);
  }
}

.fadeDown {
  animation: fadeDown 0.6s ease-in-out both;
  will-change: opacity, transform;
}

@keyframes fadeIn {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

.fadeIn {
  animation: fadeIn 0.6s ease-in-out both;
  will-change: opacity;
}

@keyframes twinkle {
  0%,
  100% {
    opacity: 1;
  }
  50% {
    opacity: 0.3;
  }
}

.twinkle {
  --duration: 1s;
  animation: twinkle var(--duration) cubic-bezier(0.4, 0, 0.2, 1) infinite;
  will-change: opacity;
}

@keyframes shooting {
  0% {
    transform: translateX(-100px) translateY(-100px) rotate(var(--angle));
    opacity: 0;
  }
  15% {
    opacity: 1;
  }
  85% {
    opacity: 0.8;
  }
  100% {
    transform: translateX(calc(100vw + 100px)) translateY(calc(100vh + 100px))
      rotate(var(--angle));
    opacity: 0;
  }
}

.shooting {
  --angle: 45deg;
  --duration: 8s;
  animation: shooting var(--duration) cubic-bezier(0.4, 0, 0.2, 1) forwards;
  will-change: transform, opacity;
}
